package ed448

import (
	"bytes"
	"testing"
)

func TestEdPublicKeyToX448(t *testing.T) {
	// b93a28627cfa29fedb03c21aac0faa1ea0ba84c10cefa07c938f2e0adbf996f02c8d00e39695dfb6a0636c8bcb21645b06a869dfbbb489ef00
	edKey := PublicKey{
		0xb9, 0x3a, 0x28, 0x62, 0x7c, 0xfa, 0x29, 0xfe,
		0xdb, 0x03, 0xc2, 0x1a, 0xac, 0x0f, 0xaa, 0x1e,
		0xa0, 0xba, 0x84, 0xc1, 0x0c, 0xef, 0xa0, 0x7c,
		0x93, 0x8f, 0x2e, 0x0a, 0xdb, 0xf9, 0x96, 0xf0,
		0x2c, 0x8d, 0x00, 0xe3, 0x96, 0x95, 0xdf, 0xb6,
		0xa0, 0x63, 0x6c, 0x8b, 0xcb, 0x21, 0x64, 0x5b,
		0x06, 0xa8, 0x69, 0xdf, 0xbb, 0xb4, 0x89, 0xef,
		0x00,
	}

	// 163af30230e62cbf36fd8f4713f2204d78fa8f94f79adfe4f49ed1075d12b3a725a5e5c0564faa6445900b4d166b89b76f2db5c374411129
	x448Key := [56]byte{
		0x16, 0x3a, 0xf3, 0x02, 0x30, 0xe6, 0x2c, 0xbf,
		0x36, 0xfd, 0x8f, 0x47, 0x13, 0xf2, 0x20, 0x4d,
		0x78, 0xfa, 0x8f, 0x94, 0xf7, 0x9a, 0xdf, 0xe4,
		0xf4, 0x9e, 0xd1, 0x07, 0x5d, 0x12, 0xb3, 0xa7,
		0x25, 0xa5, 0xe5, 0xc0, 0x56, 0x4f, 0xaa, 0x64,
		0x45, 0x90, 0x0b, 0x4d, 0x16, 0x6b, 0x89, 0xb7,
		0x6f, 0x2d, 0xb5, 0xc3, 0x74, 0x41, 0x11, 0x29,
	}
	generatedKey := EdPublicKeyToX448(edKey)

	if bytes.Compare(x448Key[:], generatedKey[:]) != 0 {
		t.Errorf("converted x448 key must be %x, but it is %x", generatedKey, x448Key)
	}
}

func TestEdPrivateKeyToX448(t *testing.T) {
	// b93a28627cfa29fedb03c21aac0faa1ea0ba84c10cefa07c938f2e0adbf996f02c8d00e39695dfb6a0636c8bcb21645b06a869dfbbb489ef00
	edKey := PrivateKey{
		0xb9, 0x3a, 0x28, 0x62, 0x7c, 0xfa, 0x29, 0xfe,
		0xdb, 0x03, 0xc2, 0x1a, 0xac, 0x0f, 0xaa, 0x1e,
		0xa0, 0xba, 0x84, 0xc1, 0x0c, 0xef, 0xa0, 0x7c,
		0x93, 0x8f, 0x2e, 0x0a, 0xdb, 0xf9, 0x96, 0xf0,
		0x2c, 0x8d, 0x00, 0xe3, 0x96, 0x95, 0xdf, 0xb6,
		0xa0, 0x63, 0x6c, 0x8b, 0xcb, 0x21, 0x64, 0x5b,
		0x06, 0xa8, 0x69, 0xdf, 0xbb, 0xb4, 0x89, 0xef,
		0x00,
	}

	// 74a4d56b9ca4bb819778d5b089ef89428bbe768825c83264e97cfba7c0a5f3c33d6ac807e3a568d72a605283f89b8afa52b06323704d9278,
	x448Key := [56]byte{
		0x74, 0xa4, 0xd5, 0x6b, 0x9c, 0xa4, 0xbb, 0x81,
		0x97, 0x78, 0xd5, 0xb0, 0x89, 0xef, 0x89, 0x42,
		0x8b, 0xbe, 0x76, 0x88, 0x25, 0xc8, 0x32, 0x64,
		0xe9, 0x7c, 0xfb, 0xa7, 0xc0, 0xa5, 0xf3, 0xc3,
		0x3d, 0x6a, 0xc8, 0x07, 0xe3, 0xa5, 0x68, 0xd7,
		0x2a, 0x60, 0x52, 0x83, 0xf8, 0x9b, 0x8a, 0xfa,
		0x52, 0xb0, 0x63, 0x23, 0x70, 0x4d, 0x92, 0x78,
	}
	generatedKey := EdPrivateKeyToX448(edKey)

	if bytes.Compare(x448Key[:], generatedKey[:]) != 0 {
		t.Errorf("converted x448 key must be %x, but it is %x", generatedKey, x448Key)
	}
}

func TestDeriveSecret(t *testing.T) {
	priv := PrivateKey{
		0x1c, 0xcc, 0x9e, 0x4f, 0x16, 0x22, 0x21, 0xab, 
		0x07, 0xb6, 0x13, 0xcb, 0x55, 0x70, 0xa7, 0x9e, 
		0xae, 0x68, 0xaf, 0x18, 0xcb, 0xf9, 0x3c, 0xf9, 
		0xf7, 0xea, 0x29, 0xbd, 0xf4, 0x1b, 0x20, 0x93, 
		0x9e, 0x7f, 0xa3, 0xd9, 0x87, 0x99, 0xef, 0xff, 
		0xc0, 0x55, 0xfe, 0x7e, 0x17, 0x1e, 0x5a, 0x11, 
		0xe7, 0xf2, 0x06, 0x14, 0xd9, 0x4c, 0xc7, 0x1b, 
		0x60,
	}

	pub := PublicKey{
		0x1e, 0xb0, 0x39, 0x16, 0xcf, 0xaf, 0x7a, 0x7f, 
		0x63, 0x63, 0x72, 0xda, 0x50, 0x0a, 0x16, 0xcf, 
		0x47, 0x60, 0x16, 0x2c, 0x84, 0xea, 0xb3, 0xb5, 
		0x27, 0xf4, 0x5f, 0xdb, 0xf7, 0x8f, 0x1b, 0x42, 
		0xdc, 0x84, 0xc6, 0x35, 0x46, 0x0d, 0xf4, 0xd0, 
		0x34, 0xc1, 0x40, 0x18, 0x2c, 0xcf, 0xf1, 0x44, 
		0xc9, 0xcb, 0xfc, 0x03, 0x4d, 0x64, 0xbb, 0xa3, 
		0x80,
	}

	secret1 := [56]byte{
		0x21, 0xdf, 0x34, 0xe5, 0x26, 0x38, 0x13, 0x75, 
		0x9b, 0xd7, 0x62, 0xcc, 0xb2, 0xbc, 0x14, 0xf2, 
		0xd6, 0xea, 0x30, 0x73, 0xfd, 0x01, 0xa5, 0xae, 
		0xcd, 0x7c, 0x57, 0x47, 0x2f, 0xea, 0xf9, 0x1b, 
		0x85, 0xa2, 0xa7, 0xf4, 0x59, 0x59, 0x47, 0xf3, 
		0x5d, 0xdd, 0x0a, 0xa8, 0xc9, 0xe7, 0x68, 0x10, 
		0x8b, 0x30, 0xe5, 0xfe, 0x42, 0x37, 0x2e, 0x46,
	}

	secret2 := Ed448DeriveSecret(pub, priv)

	if bytes.Compare(secret1[:], secret2[:]) != 0 {
		t.Errorf("secret must be %x, but it is %x", secret1, secret2)
	}
}


func TestDerivePublicKey(t *testing.T) {
	priv := PrivateKey{
		0xf8, 0xe0, 0x72, 0xd7, 0xe1, 0x7c, 0x63, 0x4b, 
		0x27, 0xf2, 0x5d, 0x85, 0xb0, 0x3a, 0xb6, 0x0e, 
		0xa5, 0xa5, 0xe8, 0xd4, 0x7c, 0x0f, 0xfb, 0xf8, 
		0x84, 0x31, 0xed, 0xdc, 0x90, 0x9b, 0x47, 0x2b, 
		0x7f, 0xa0, 0x60, 0xf3, 0xfb, 0x39, 0x11, 0xea, 
		0xed, 0x8e, 0xb5, 0xa6, 0xad, 0x5a, 0x65, 0xe9, 
		0x9a, 0xe7, 0x7c, 0x0f, 0x31, 0xfb, 0x14, 0xd3, 
		0xfc,
	}

	pub1 := PublicKey{
		0xc0, 0xd6, 0xf5, 0xf3, 0x27, 0xb1, 0x29, 0x0d, 
		0xbd, 0x0f, 0xc5, 0xb2, 0x4a, 0xe8, 0x5c, 0x16, 
		0x64, 0x2b, 0x60, 0xe5, 0x6a, 0x3a, 0x38, 0xd9, 
		0xfc, 0xf3, 0x41, 0x77, 0xd0, 0xe5, 0x09, 0x7f, 
		0x99, 0x7f, 0x1b, 0x87, 0x23, 0x3d, 0x95, 0x7b, 
		0xe6, 0xa3, 0x09, 0x1d, 0xd8, 0x17, 0xbf, 0x9f, 
		0x93, 0xdc, 0x9f, 0x7f, 0x49, 0x7e, 0x99, 0x68, 
		0x80,
	}
	pub2 := Ed448DerivePublicKey(priv)

	if bytes.Compare(pub1[:], pub2[:]) != 0 {
		t.Errorf("public key must be %x, but it is %x", pub1, pub2)
	}
}

func TestSignMessage(t *testing.T) {
	priv := PrivateKey{
		0x85, 0xd5, 0x31, 0x7e, 0x80, 0xb2, 0x1c, 0xc6, 
		0xac, 0x1d, 0x25, 0x08, 0xee, 0x40, 0xb1, 0xa3, 
		0x4a, 0x0f, 0x9f, 0x2c, 0xba, 0xc2, 0xde, 0xfd, 
		0x76, 0x52, 0x45, 0xb7, 0x4d, 0xbc, 0x82, 0xf4, 
		0x09, 0x8e, 0xae, 0x8b, 0xa0, 0x86, 0x71, 0x6c, 
		0xe5, 0x95, 0x5f, 0xf0, 0x49, 0x93, 0x9d, 0x8c, 
		0xfa, 0xeb, 0xa7, 0x61, 0xd3, 0x5e, 0xc3, 0x00, 
		0x8d, 
	}

	sig1 := [114]byte {
		0x4b, 0x3b, 0x09, 0x49, 0xcf, 0x44, 0x39, 0x4b, 
		0x01, 0xda, 0x93, 0x25, 0xaa, 0x25, 0xf1, 0xea, 
		0xd0, 0x1a, 0x85, 0x38, 0x30, 0xb7, 0x62, 0xa3, 
		0xf0, 0x95, 0xbe, 0x86, 0x0d, 0xe6, 0xfd, 0xeb, 
		0x57, 0x41, 0x97, 0x61, 0x67, 0x19, 0x0e, 0x4c, 
		0x49, 0xd8, 0x3a, 0x55, 0x0b, 0x82, 0xda, 0xd9, 
		0x8b, 0x18, 0xda, 0x61, 0xc0, 0x44, 0x88, 0xb1, 
		0x80, 0x9f, 0x20, 0x6d, 0xcb, 0x36, 0xf3, 0xcb, 
		0x3f, 0x23, 0x9f, 0x2d, 0xf2, 0x17, 0x34, 0xba, 
		0xed, 0x91, 0x26, 0x9b, 0x40, 0x39, 0xa5, 0x47, 
		0xfe, 0x77, 0x70, 0x61, 0x93, 0x6c, 0xab, 0xd9, 
		0x46, 0x89, 0xe7, 0x6e, 0x52, 0x32, 0x4b, 0x45, 
		0xc1, 0x66, 0x67, 0x50, 0xae, 0x18, 0x09, 0xad, 
		0x80, 0xf9, 0xf5, 0x33, 0x0a, 0x86, 0x4c, 0x02, 
		0x05, 0x00,
	}
	pub := Ed448DerivePublicKey(priv)
	sig2 := Ed448Sign(priv, pub, []byte{1}, []byte{}, false)

	if bytes.Compare(sig1[:], sig2[:]) != 0 {
		t.Errorf("signature must be %x, but it is %x", sig1, sig2)
	}
}


func TestSignVerify(t *testing.T) {
	priv := PrivateKey{
		0xb9, 0x3a, 0x28, 0x62, 0x7c, 0xfa, 0x29, 0xfe,
		0xdb, 0x03, 0xc2, 0x1a, 0xac, 0x0f, 0xaa, 0x1e,
		0xa0, 0xba, 0x84, 0xc1, 0x0c, 0xef, 0xa0, 0x7c,
		0x93, 0x8f, 0x2e, 0x0a, 0xdb, 0xf9, 0x96, 0xf0,
		0x2c, 0x8d, 0x00, 0xe3, 0x96, 0x95, 0xdf, 0xb6,
		0xa0, 0x63, 0x6c, 0x8b, 0xcb, 0x21, 0x64, 0x5b,
		0x06, 0xa8, 0x69, 0xdf, 0xbb, 0xb4, 0x89, 0xef,
		0x00,
	}
	
	pub := Ed448DerivePublicKey(priv)

	sig := Ed448Sign(priv, pub, []byte{1}, []byte{}, false)
	ver := Ed448Verify(pub, sig[:], []byte{1}, []byte{}, false)
	if ver != true {
		t.Errorf("Signature doesn't verify")
	}

	sig = Ed448Sign(priv, pub, []byte{1}, []byte{}, false)
	if Ed448Verify(pub, sig[:], []byte{2}, []byte{}, false) {
		t.Errorf("Signature verifies, but it must not")
	}


}
